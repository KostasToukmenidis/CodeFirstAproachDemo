@*Orinally scafolded from .Models.Weapon class because it gets done most of my view and i only have to change model up here and make dropdown 
    for WeaponType.Types also adding Weapon. before every expression because view model is now WeaponViewModel*@
@model CodeFirstAproachDemo.ViewModels.WeaponViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Add a new Gun.</h2>


@using (Html.BeginForm("Create", "Weapon")) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Weapon.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Weapon.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Weapon.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">   @*Label shoes WeaponType.Name wich is Weapon Type via Data Annotations in WeaponType Class*@
            @Html.LabelFor(model => model.Weapon.WeaponType.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*Using this Html.DropDownListFor() and passing in SelectList with Model.WeaponTypes as parameter and values to display the WeaponType names in a drop down list*@
                @Html.DropDownListFor(model => model.Weapon.WeaponTypeId, new SelectList(Model.WeaponTypes, "Id", "Name"), "Gun Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Weapon.WeaponTypeId, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Weapon.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Weapon.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Weapon.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.HiddenFor(m => m.Weapon.Id)
                <input type="submit" value="Save Gun" class="btn btn-primary"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-success" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
